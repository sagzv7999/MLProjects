ratingtest<-read.csv(file="ratings_firstmillion.csv",header = T)
save.image("~/Documents/R workingDirectory/Untitled.RData")
ratingtest<-read.csv(file="ratings_firstmillion.csv",header = T)
setwd("~/Documents/R workingDirectory")
ratingtest<-read.csv(file="ratings_firstmillion.csv",header = T)
ratingtest=ratingtest[1:100000,]
names(ratingtest)
model <- lm(ratingtest$rating ~ ratingtest$movieId+ratingtest$userId+ratingtest$timestamp, ratingtest)
abline(model)
?abline()
ratingtest<-read.csv(file="ratings_firstmillion.csv",header = T)
ratingtest=ratingtest[1:100000,]
plot(ratingtest)
names(ratingtest)
# Create a linear regression model
model <- lm(ratingtest$rating ~ ratingtest$movieId+ratingtest$userId+ratingtest$timestamp, ratingtest)
# Add the fitted line
ratingtest<-read.csv(file="ratings_firstmillion.csv",header = T)
ratingtest<-read.csv(file="ratings_firstmillion.csv",header = T)
ratingtest=ratingtest[1:100000,]
plot(ratingtest)
names(ratingtest)
model <- lm(ratingtest$rating ~ ratingtest$movieId+ratingtest$userId+ratingtest$timestamp, ratingtest)
# Add the fitted line
abline(model)
library(dplyr)
install.packages("dplyr")
sample_frac
library(dplyr)
?sample_frac()
library(dplyr)
library(randomForest)
ratingtest<-read.csv(file="ratings_firstmillion.csv",header = T)
ratingtest=ratingtest[1:100000,]
train<-sample_frac(ratingtest, 0.8)
sid<-as.numeric(rownames(train)) # because rownames() returns character
test<-a[-sid,]
test<-ratingtest[-sid,]
head(train)
head(test)
nrow(test)
nrow(train)
train_label = train['rating']
head(train_label)
train = train[-grep('rating', colnames(train))]
head(train)
names(tets)
names(test)
test_label = test['rating']
test = test[-grep('rating',colnames(test))]
df_all = rbind(train,test)
ohe_feats = c('gender', 'education', 'employer')
dummies <- dummyVars(~ gender +  education + employer, data = df_all)
library(xgboost)
library(readr)
library(stringr)
library(caret)
library(car)
dummies <- dummyVars(~ gender +  education + employer, data = df_all)
ohe_feats = c('gender', 'education', 'employer')
dummies <- dummyVars(~ gender +  education + employer, data = df_all)
?dummyVars()
ohe_feats = c('gender', 'education')
dummies <- dummyVars(~ gender +  education, data = df_all)
?xgboost()
install.packages("xgboost")
?xgboost()
library(xgboost)
?xgboost()
y_pred <- predict(bstSparse, data.matrix(test))
bstSparse <- xgboost(data = train$data, label = train_label, max_depth = 15, eta = 1, nthread = 2, nrounds = 25, objective = "binary:logistic")
head(y_pred)
y_pred <- predict(bstSparse, data.matrix(test))
bstSparse <- xgboost(data = train$data, label = train_label, max_depth = 15, eta = 1, nthread = 2, nrounds = 25, objective = "binary:logistic")
head(train_label)
head(train)
bstSparse <- xgboost(data = train, label = train_label, max_depth = 15, eta = 1, nthread = 2, nrounds = 25, objective = "binary:logistic")
train
head(train)
head(test)
train = as.data.frame(train[-grep('rating', colnames(train))])
library(xgboost)
library(readr)
library(stringr)
library(caret)
library(car)
library(dplyr)
library(randomForest)
ratingtest<-read.csv(file="ratings_firstmillion.csv",header = T)
ratingtest=ratingtest[1:100000,]
train<-sample_frac(ratingtest, 0.8)
sid<-as.numeric(rownames(train)) # because rownames() returns character
test<-ratingtest[-sid,]
train_label = as.data.frame(train['rating'])
test_label = as.data.frame(test['rating'])
train = as.data.frame(train[-grep('rating', colnames(train))])
test = as.data.frame(test[-grep('rating',colnames(test))])
df_all = rbind(train,test)
bstSparse <- xgboost(data = train, label = train_label, max_depth = 15, eta = 1, nthread = 2, nrounds = 25, objective = "binary:logistic")
bstSparse <- xgb.DMatrix(data = train, label = train_label, max_depth = 15, eta = 1, nthread = 2, nrounds = 25, objective = "binary:logistic")
class(train)
class(train_label)
bstSparse <- xgb.DMatrix(data = train, label = train_label, max_depth = 15, eta = 1, nthread = 2, nrounds = 25, objective = "logistic")
bstSparse <- xgb.DMatrix(data = df_all, label = train_label, max_depth = 15, eta = 1, nthread = 2, nrounds = 25, objective = "logistic")
?randomForest()
